# Knight's ebnf grammar

# Begin
<Translation_Unit> ::= {<Function_Definition>} CODE_EOF

# Definition
<Function_Definition> ::= [INT | DEC | STR | BOOL] IDENTIFIER "("[<Parameter_List>]")" "{"{<Statement>}"}" 
<Parameter> ::= (INT | DEC | STR | BOOL) IDENTIFIER
<Parameter_List> ::= <Parameter>{","<Parameter>}
<LocalVariable_Definition> ::= (INT | DEC | STR | BOOL) IDENTIFIER [":"<Expression>]";"

#Statement
<Statement> ::= <Compound_Statement> | <LocalVariable_Definition> | <If_Statement> | <While_Statement> |
              | <Return_Statement> | <Print_Statement> | <Expression_Statement> 
<Compound_Statement> ::= "{"{<Statement>}"}"

<If_Statement> ::= IF"("<Expression>")"<Statement>[ELSE<Statement>]
<While_Statement> ::= WHILE"("<Expression>")"<Statement>

<Return_Statement> ::= RET [<Expression>] ";"

<Print_Statement> ::= PRINT <Expression> ";"
<Expression_Statement> ::= [<Expression>]";"

# Expression
<Expression> ::= <Assignment_Expression>
<Assignment_Expression> ::= [IDENTIFIER "="] <LogicOr_Expression>

<LogicOr_Expression> ::= <LogicAnd_Expression>{"or"<LogicAnd_Expression>}
<LogicAnd_Expression> ::= <Equality_Expression>{"and"<Equality_Expression>}

<Equality_Expression> ::= <Relational_Expression>{("?=" | "!=")<Relational_Expression>}
<Relational_Expression> ::= <PlusMinus_Expression>{("<" | "<=" | ">" | ">=")<PlusMinus_Expression>}

<PlusMinus_Expression> ::= <MulDiv_Expression>{("+" | "-")<MulDiv_Expression>}
<MulDiv_Expression> ::= <Unary_Expression>{("*" | "/" | "%")<Unary_Expression>}

<Unary_Expression> ::= ["-" | "not"] (<Primary_Expression> | <FunctionCall_Expression>) 
<Primary_Expression> ::= "("<Expression>")" | IDENTIFIER |
                        | CONSTANT_INT | CONSTANT_DEC | CONSTANT_STR | "true" | "false" 
<FunctionCall_Expression>::= IDENTIFIER "(" [<Expression>{","<Expression>}] ")"                      