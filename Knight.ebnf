# Knight's ebnf grammar

# Begin
<Translation_Unit> ::= {<Permission_Definition>|Invoke_Definition|<Function_Definition>} CODE_EOF

# Definition
<Permission_Definition> ::= PERMISSION IDENTIFIER{,IDENTIFIER}

<Type> ::= (INT | DEC | STR | BOOL)["<"IDENTIFIER{,IDENTIFIER}">"]
<Invoke_Definition> ::= INVOKE IDENTIFIER ":" [<Type>] IDENTIFIER "("[<Parameter_List>]")"
<Function_Definition> ::= [<Type>] IDENTIFIER "("[<Parameter_List>]")" "{"{<Statement>}"}" 
<Parameter> ::= <Type> IDENTIFIER
<Parameter_List> ::= <Parameter>{","<Parameter>}

<LocalVariable_Definition> ::= <Type> IDENTIFIER [":"<Expression>]";"

#Statement
<Statement> ::= <Compound_Statement> | <LocalVariable_Definition> | <If_Statement> | <While_Statement> |
              | <Return_Statement> | <Exit_Statement> | <Input_Statement> | <Output_Statement> | 
              | <Assignment_Statement> | <Expression_Statement> 
<Compound_Statement> ::= "{"{<Statement>}"}"

<If_Statement> ::= IF"("<Expression>")"<Statement>[ELSE<Statement>]
<While_Statement> ::= WHILE"("<Expression>")"<Statement>
<Return_Statement> ::= RET [<Expression>] ";"
<Exit_Statement> ::= EXIT ";"
<Input_Statement> ::= INPUT IDENTIFIER{,IDENTIFIER} ";"
<Output_Statement> ::= OUTPUT <Expression>{,<Expression>} ";"
<Assignment_Statement> ::= IDENTIFIER"=" <Expression> ";"
<Expression_Statement> ::= <Expression>";"

# Expression
<Expression> ::= <LogicOr_Expression>

<LogicOr_Expression> ::= <LogicAnd_Expression>{"or"<LogicAnd_Expression>}
<LogicAnd_Expression> ::= <Equality_Expression>{"and"<Equality_Expression>}

<Equality_Expression> ::= <Relational_Expression>{("?=" | "!=")<Relational_Expression>}
<Relational_Expression> ::= <PlusMinus_Expression>{("<" | "<=" | ">" | ">=")<PlusMinus_Expression>}

<PlusMinus_Expression> ::= <MulDiv_Expression>{("+" | "-")<MulDiv_Expression>}
<MulDiv_Expression> ::= <Unary_Expression>{("*" | "/" | "%")<Unary_Expression>}

<Unary_Expression> ::= ["-" | "not"] (<Primary_Expression> | <FunctionCall_Expression>) 
<Primary_Expression> ::= "("<Expression>")" | IDENTIFIER |
                        | CONSTANT_INT | CONSTANT_DEC | CONSTANT_STR | "true" | "false" 
<FunctionCall_Expression>::= [IDENTIFIER"."]IDENTIFIER "(" [<Expression>{","<Expression>}] ")"                      